/* 
The optimized version of the password game has no password change procedure and also is more harder as the game
resets back to stage1 if the wrong password is entered at any stage i.e 1, 2 or 3.
Stage 1 pass: 1111
Stage 2 pass: 2222
Stage 3 pass: 3333
*/

//Including the necessary libraries for the project.
#include <LiquidCrystal.h>
#include <Keypad.h>
#include <Adafruit_NeoPixel.h>
#include <Servo.h>

/*
Pin-out of 16x2 LCD and connection with arduino (Left to right)
LCDpinno       Description       	     Arduino
   1            VSS		                  GND
   2	          VDD			                5v(Short with pin 15 of LCD)
   3	          VO			                No connection with arduino, but with output(middle pin) of 10k potentiometer
   4	          RS			                9
   5	          R/W			                GND	
   6	          EN			                8
 7,8,9,10     1st 4-bit data lines      No connection as we use the LCD in 4-bit data mode only
   11		       data_pin 4		            7
   12		       data_pin 5		            6
   13	         data_pin 6		            5
   14	         data_pin 7		            4 
   15		       VCC			                Connect to a 220 ohm resistor and the resistor to Arduino 5v pin
   16		       GND			                GND

Pin-out of 4x3 matrix keypad and connection with arduino

  Pin-no(Left to right)      Matrix-description        Arduino-pin
      1                             R1                 A0
      2                             R2                 A1
      3                             R3                 A2
      4                             R4                 A3
      5                             C1                 A4
      6                             C2                 A5
      7                             C3                digital pin  3

Pin-out of Neopixels WS2812B and connection with arduino

     Pin-description               Arduino
         GND                  Connect this terminal to negative of 5v power supply, and again this same terminal to Arduino Gnd pin.
         VCC                  Connect this terminal to positive of 5v power supply, and again this same terminal to Arduino VCC pin.
         INPUT                Connect this to a 330ohm resistor and the other end of the resistor to Digital pin 2 of arduino.

       Note: Please connect a 100uf capacitor between positive and negative terminal of the 5v power supply.


Pin-out of Servo motors 1 and 2 and connection with arduino

  Servo1_pins       Arduino
   VCC               5v
   GND               GND
   INPUT           digital pin 10
   
 Servo2_pins       Arduino
   VCC               5v
   GND               GND
   INPUT           digital pin 11

 Pin-out of ultrasonic LED and connection with arduino

    anoode - digital pin 12
    cathode - GND
*/
   		
//defining variable liquid_crystal_display of type LiquidCrystal with connection to pins as follows :
// (RS,EN,data_pin4,data_pin5,data_pin6,data_pin7) 
LiquidCrystal liquid_crystal_display(9,8,7,6,5,4);

//These variables store the default password of stage1, stage2 and stage3 respectively. You can change it from here.
char stage1_password[4] = {'1','1','1','1'};
char stage2_password[4] = {'2', '2', '2', '2'};
char stage3_password[4] = {'3', '3', '3', '3'};

//stores password temporarily during gameplay and is used for comparison with actual password of that stage.
char password[4];

//used as counter for entering password for stage 1, 2 and 3 respectively. 
int i=0;
int k=0;
int l=0;

//Defining Keypad parameters same as done in keypad_test(Please refer keypad_test for detailed explanation)
char key_pressed=0;

const byte rows = 4; 
const byte columns = 3; 
char hexaKeys[rows][columns] = {
{'1','2','3'},
{'4','5','6'},
{'7','8','9'},
{'*','0','#'}
};
byte row_pins[rows] = {A0,A1,A2,A3};
byte column_pins[columns] = {A4,A5,3};   
Keypad keypad_key = Keypad( makeKeymap(hexaKeys), row_pins, column_pins, rows, columns);

//defining the pin where input of WS2812B is connected.
#define WS2812B_LED_PIN 2

//This is the no of leds in the WS2812B strip.
#define WS2812B_LED_COUNT 15

//defining variable of type Adafruit_NeoPixel with above parameters, 3rd argument 'NEO_GRB + NEO_KHZ800' is hardware specific.
Adafruit_NeoPixel strip(WS2812B_LED_COUNT, WS2812B_LED_PIN, NEO_GRB + NEO_KHZ800);

//Creating an object of class Servo1 i.e. stage2 servo.
Servo servo1;

//Creating an object of class Servo1 i.e. stage3 servo.
Servo servo2;


//These are the values for initial postion,final position and time to wait before retracing the path for servo1. You need to
// set these values according to the mechanism's constraints. Test the code with different values to decide the values which
//work for you. Use the servo_testing code for testing if you want.

int servo1_initial_pos = 10;
int servo1_final_pos = 180;
int servo1_time = 200;

int servo2_initial_pos = 10;
int servo2_final_pos = 180;
int servo2_time = 500;

//defining the uv led pin connection to arduino
#define uv_led 12


void setup()

{
  Serial.begin(9600);
  
  //initializing the 16x2 lcd
  liquid_crystal_display.begin(16,2);

  //initializing the WS2812B leds
  strip.begin();
  strip.show();

//Initializing the servos with pin no and initial position
  servo1.attach(10);
  servo1.write(servo1_initial_pos);
  
  servo2.attach(11);
  servo2.write(servo2_initial_pos);
  
  //setting the uv_led pin as output and keeping it off for now.
  pinMode(uv_led,OUTPUT);
  digitalWrite(uv_led,LOW);
  
  // We print the welocme message. It is to remember that there are only 16 characters in one line available, so calculate
  // the printed text accordingly and if need to write more, go to next line using set cursor command and then use print statement again.
  liquid_crystal_display.print("Welcome to the ");
  liquid_crystal_display.setCursor(0,1);
  liquid_crystal_display.print("password game!");
  delay(200);
  
  //These are instruction messages which are printed on LCD many times throughout the game, You will see ahead. The instruction
  //are explained in detail in start of the code. Please read it before going ahead.
  instructions();
}

void loop()

{
//Now we check if any key is presses or not and store that value in key_pressed varibale, same as done in keypad_test.
key_pressed = keypad_key.getKey();

//if key_pressed is not empty, this if becomes true which means a particular key is pressed.
 if(key_pressed)
 
     {   
        
	        //this message indicated we are now playing the game and entering the stage1 password
          liquid_crystal_display.setCursor(0,0);
          liquid_crystal_display.print("stage1 password:");
          liquid_crystal_display.setCursor(i,1);
          
          //storing each presses key in the password character array
          password[i++]= key_pressed;
          //Serial.println(key_pressed);
          //displaying each pressed key
          liquid_crystal_display.print(key_pressed);

//if value of i becomse 4 which means 4 digit password is entered, we enter this loop
          if(i==4)
            {
              delay(200);
              
// Now we use the strncmp function to comapre elements of both the arrays, if both arrays are equal, it returns 
// 0 which is why we used the '!' negate operator.
              if(!(strncmp(password, stage1_password,4)))
                { 
                   i=0;
                   liquid_crystal_display.clear();
                   liquid_crystal_display.print("Pass Accepted!");
                   delay(200);
                   liquid_crystal_display.clear();
                   liquid_crystal_display.print("Its stage2!");
                   delay(200);
                   liquid_crystal_display.clear();
                   
                //THis function takes care of lighting the Leds according to the stage 2 password
                   glow(stage2_password);
                
                   liquid_crystal_display.clear();
                   liquid_crystal_display.print("enter stage2");
                   liquid_crystal_display.setCursor(0,1);
                   liquid_crystal_display.print("password");
                   delay(300);
                   liquid_crystal_display.clear();
                //now we again take inputs from matrix keypad for password of stage2
                   char key;
                //this checks if value of k is or more than 4
                   while(k<4)
                  {   
                      key = keypad_key.getKey();
                  //if a key is pressed, key becomes non-zero and this loop becomes true
                      if(key)
                       { 
                          liquid_crystal_display.setCursor(0,0);
                          liquid_crystal_display.print("stage2 password:");
                        //cursor is set according so as to display every presses key
                          liquid_crystal_display.setCursor(k,1);
                          password[k++]= key;
                          liquid_crystal_display.print(key);
                       }
                   }
                     key = 0;
                     delay(200);
                //again we compare the stored password in password array with actual stage2 password
                     if(!(strncmp(password, stage2_password,4)))
                         
                    	    {  
                                  liquid_crystal_display.clear();
                      		       liquid_crystal_display.print("Pass Accepted!");
                                  delay(200);
                                  k =0;
                                  liquid_crystal_display.clear();
                                  liquid_crystal_display.print("Its stage3!");
                                  delay(200);
                                  liquid_crystal_display.clear();
                                  
                       //making uv_led pin high to glow the Led
                                  digitalWrite(uv_led,HIGH);
                             
                        //rotate the servo from a defined initial position to the final position
                                  for(int angle = servo1_initial_pos; angle<servo1_final_pos; angle++)  
                                   {                                  
                                       servo1.write(angle);               
                                       delay(10);                   
                                   }
                       //wait for a pre-defined time until reverse actuation of servo
                                   delay(servo1_time);
                       
                             //Now rotating servo from final to initial position i.e in reverse direction 
                             for(int angle = servo1_final_pos; angle>servo1_initial_pos; angle--)    
                                   {                                
                                      servo1.write(angle);           
                                      delay(10);       
                                   } 
                       
                                   liquid_crystal_display.clear();
                                   liquid_crystal_display.print("enter stage3");
                                   liquid_crystal_display.setCursor(0,1);
                                   liquid_crystal_display.print("password");
                                   delay(300);
                                   liquid_crystal_display.clear();
                             //now taking keypad input again for stage 3 password
                                   char key_1;
                                   while(l<4)
                                    {   
                                   key_1 = keypad_key.getKey();
                                   if(key_1)
                                       { 
                                          liquid_crystal_display.setCursor(0,0);
                                          liquid_crystal_display.print("stage3 password:");
                                          liquid_crystal_display.setCursor(l,1);
                                          password[l++]= key_1;
                                          liquid_crystal_display.print(key_1);
                                        }
                                    }
                                          
                                          key_1 = 0;
                                          delay(200);
                                    
                                    if(!(strncmp(password, stage3_password,4)))
                         
                    	        {  
                                  liquid_crystal_display.clear();
                      		      liquid_crystal_display.print("Pass Accepted!");
                                  delay(200);
                                  k =0;
                                  liquid_crystal_display.clear();
                                  liquid_crystal_display.print("Congratulations!");
                                  liquid_crystal_display.setCursor(0,1);
                                  liquid_crystal_display.print("You did it!");
                                  delay(200);
                                 
                          // now actuating servo2 in similar way as servo1            
                                  for(int angle = servo2_initial_pos; angle<servo2_final_pos; angle++)  
                                    {                                  
                                       servo2.write(angle);               
                                       delay(10);                   
                                    }
                                    
                                    delay(servo2_time);
                       
                                   for(int angle = servo2_final_pos; angle>servo2_initial_pos; angle--)    
                                     {                                
                                      servo2.write(angle);           
                                      delay(10);       
                                     }
                                      
                                     delay(1000);
                                     instructions();

                                
                                 }
                                 
                                
                   //if stage3 password entered is wrong, this loops becomes true and is excecuted    
                               else
                             {
                                
                                   liquid_crystal_display.clear();
                                   liquid_crystal_display.print("That's  wrong!");
                                   liquid_crystal_display.setCursor(0,1);
                                   liquid_crystal_display.print("Its game over");
                                   delay(300);
                                   l = 0;
                                   liquid_crystal_display.clear();
                                   instructions();
                       
                              }
                     }
                       
                       //if stage2 password entered is wrong, this loops becomes true and is excecuted
                           else
                         {
                                   liquid_crystal_display.clear();
                                   liquid_crystal_display.print("That's  wrong!");
                                   liquid_crystal_display.setCursor(0,1);
                                   liquid_crystal_display.print("Its game over");
                                   delay(300);
                                   k = 0;
                                   liquid_crystal_display.clear();
                                   instructions();     
                           }
                     
                        
                
                        }
            
            
            
  
     //If the stage2 password is wrong, this loop is excecuted                 
            else
                 {
                 
                   liquid_crystal_display.clear();
                   liquid_crystal_display.print("That's  wrong!");
                   liquid_crystal_display.setCursor(0,1);
                   liquid_crystal_display.print("Its game over");
                   delay(300);
                   i = 0;
                   liquid_crystal_display.clear();
                   instructions();
               }
           }
       }
   }

void instructions()
{
  
  liquid_crystal_display.clear();
  liquid_crystal_display.print("Enter the stage1");
  liquid_crystal_display.setCursor(0,1);
  liquid_crystal_display.print("password");
  delay(300);
  liquid_crystal_display.clear();
}

void glow(char code[])
{
   liquid_crystal_display.clear();
   liquid_crystal_display.print("Observe the LEDs");
   delay(100);
   liquid_crystal_display.clear();
   
   //this is done to convert the character values of password into integer values
   int a = code[0]-'0';
   int b = code[1]-'0';
   int c = code[2]-'0';
   int d = code[3]-'0';
  
  //defining colors in a standard uint32 datatype to be used in strip.fill() function
   uint32_t red = strip.Color(255, 0, 0);
   uint32_t green = strip.Color(0, 255, 0);
   uint32_t blue = strip.Color(0, 0, 255);
   uint32_t white = strip.Color(255, 255, 255);
   uint32_t clear = strip.Color(0, 0, 0);
  
   //then we use the strip.fill function to fill the leds with same color
   // syntax: strip.fill(color_in_uint32_datatype, starting index, number_of_leds_to_be_filled_with_that_color)
   strip.clear();
   strip.show();
   strip.fill(red, 0, a);
   strip.show();
   delay(200);
   strip.clear();
   strip.show();
  
   strip.fill(green, 0, b);
   strip.show();
   delay(200);
   strip.clear();
   strip.show();
  
   strip.fill(blue, 0, c);
   strip.show();
   delay(200);
   strip.clear();
   strip.show();
  
   strip.fill(white, 0, d);
   strip.show();
   delay(200);
   strip.clear();
   strip.show();
   
 }
